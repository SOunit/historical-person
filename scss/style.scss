// [CSS設計] 私のためのFLOCSSまとめ
// https://qiita.com/super-mana-chan/items/644c6827be954c8db2c0

// ==========================
//　Foundation
// サイト全体のデフォルトスタイルを管理。
//
// サイトを構成する上で、デザインの基本の下地、土台となるスタイルを定義
// ※基本的にタグ自体にスタイルを定義すること。
// ※クラスなしの状態でも最低限の表示になることを心がける
// ==========================
@import 'foundation/_base';

// ========================================
// Layout
// 各ページを構成する、ヘッダー、メインコンテンツエリア、サイドバー、フッターなどのスタイルをエリアごとに管理

// ※ページ全体からみたレイアウトに対するスタイルを定義する
// ※外枠のみ定義。子要素はなるべく入れない
// ※ヘッダーやフッターの中身はp-で定義する
// =========================================
@import 'layout/_header';
@import 'layout/_main';
@import 'layout/_footer';

// =========================================
// Object
// サイト全体における、繰り返されるビジュアルパターンをすべてObjectと定義。

// - Component
// 再利用できるパターンとして、小さな単位のモジュールを定義。
// ※marginなど余白は定義しない。あくまでパーツとして扱う

// c-button.scss
// c-grid.scss
// c-input.scss

// ★flexboxのレイアウトシステムもコンポーネント化する
// flexboxのレイアウトシステム（Bootstrap4のrow,colなど）は、Layoutとして管理しそうになるがComponentとして管理する。
// 理由は、各ページに必ずある共通エリアとは限らないから
// containerは絶対ページにいるやつだけど、rowは絶対いるとは限らない。規則性なく出てくるやつだからLayoutにするのはなんか違う気もしてきたので。

// =========================================
@import 'object/component/_flex';
@import 'object/component/_card';
@import 'object/component/_image';

// =========================================
// - Project
// いくつかのComponentと、それに該当しない要素によって構成されるものを管理。

// つまり、

// 小さい単位のComponentを集めて、一つのObjectとして扱いたい時
// Componentとするには大きすぎるObjectとなる時
// にProjectとして定義する。

// アイコン付きボタンはp-buttonとc-buttonを並列にする
// =========================================

// ComponentとProjectの違い
// 人間で言えば、裸んぼの人間が最小単位のモジュールcomponentで、他にネクタイや靴下、スーツといったcomponentがあり、
// 組み合わせてビジネスマンprojectになると考えられます
// （抜粋：FLOCSSを使ったCSS設計での悩みどころと解決案 - Qiita）
//
// ここを読んでかなりしっくりきた。
//
// 小さい単位をComponent
// Componentの集まりをProject
// やったー！
